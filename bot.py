import psycopg2
from telebot import TeleBot
import requests
import datetime
from keyboards import generate_main_menu, generate_inline_btn, generate_btn

token = "5612647929:AAF6oX53ZaildBvo4Q6ZW2WbUOK1dw8SNPQ"
bot = TeleBot(token)


data_base = psycopg2.connect(
    host='localhost',
    user='postgres',
    database='Telegram_bot',
    password='123456'
    )
cursor = data_base.cursor()
cursor.execute(""" CREATE TABLE IF NOT EXISTS users(
                user_id SERIAL PRIMARY KEY,
                user_name TEXT NOT NULL UNIQUE
        ) """)
data_base.commit()


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    first_name = message.from_user.first_name
    bot.send_message(chat_id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {first_name} !')
    if data_base is None:
        cursor.execute('INSERT INTO users(user_id, user_name) VALUES (%s,%s)', (chat_id, first_name))
    cursor.execute('SELECT user_name FROM users WHERE user_id=%s', (chat_id,))
    cursor.fetchall()
    data_base.commit()
    choose_catalog(message)

def choose_catalog(message):
    chat_id = message.chat.id
    user_message = bot.send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∫–Ω–æ–ø–∫—É ", reply_markup=generate_main_menu())
    bot.register_next_step_handler(user_message, show_products)

def show_products(message):
    chat_id = message.chat.id

    if message.text == '‚õÖ–ü–æ–≥–æ–¥–∞ –≤ –ö–∞–Ω–∞–¥–µ':
        weather(message)

    elif message.text == "üìñ–•–æ—á—É –ø–æ—á–∏—Ç–∞—Ç—å!":
        bot.send_photo(
            chat_id,
            photo=open('img/img.png', 'rb'),
            caption="–ò–¥–µ–∞–ª—å–Ω—ã–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞ Python."
                    "–í—ã –Ω–∞–π–¥–µ—Ç–µ –º–æ—Ä–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö –≤ Python, –∏–º–µ–Ω–∞—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤, "
                    "–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö, –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö –∏ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö",
            reply_markup=generate_inline_btn(url='https://drive.google.com/file/d/1Xs_YjOLgigsuKl17mOnR_488MdEKloCD/view'))

    elif message.text == "üì®–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        bot.send_message(chat_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –í—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=generate_btn())

    elif message.text == "–£–≤–µ—Ä–µ–Ω":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

        cursor.execute(f'SELECT user_id FROM users WHERE user_id=%s', (chat_id,))
        data = cursor.fetchone()
        if data is None:
            user_id = ['message.chat.id']
            cursor.execute('INSERT INTO users VALUES (%s)', (user_id,))
            data_base.commit()

    elif message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(chat_id, "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        choose_catalog(message)
        return

    bot.register_next_step_handler(message, show_products)

def weather(message):
    s_city = "Ottawa,CA"
    city_id = 0
    appid = "4e25bdc5a6894e18c9709982370e4dcb"
    try:
        res = requests.get("http://api.openweathermap.org/data/2.5/find",
                           params={'q': s_city, 'type': 'like', 'units': 'metric', 'APPID': appid})
        data = res.json()
        cities = ["{} ({})".format(d['name'], d['sys']['country']) for d in data['list']]
        print("city:", cities)
        city_id = data['list'][0]['id']
        print('city_id=', city_id)
    except Exception as e:
        print("Exception (find):", e)
        pass

    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Fog": "–¢—É–º–∞–Ω \U0001F32B"
    }

    try:
        r = requests.get("http://api.openweathermap.org/data/2.5/weather",
                            params={'id': city_id, 'units': 'metric', 'lang': 'ca', 'APPID': appid})
        data = r.json()
        city = data["name"]
        cur_weather = data["main"]["temp"]
        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
            data["sys"]["sunrise"])

        bot.reply_to(message,
                     f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                     f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
                     f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                     f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å "
                     f"–¥–Ω—è: {length_of_the_day}\n "
                     f"***–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!***")

    except:
        bot.reply_to(message, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!")

if __name__ == '__main__':
    bot.polling(none_stop=True)

